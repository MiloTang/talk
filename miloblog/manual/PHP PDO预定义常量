  
	
<style type="text/css">
p, li { white-space: pre-wrap; }
</style>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></p>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_BOOL<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>表示布尔数据类型。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_NULL<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>表示<span style=" color:#c0c0c0;"> </span>SQL<span style=" color:#c0c0c0;"> </span>中的<span style=" color:#c0c0c0;"> </span>NULL<span style=" color:#c0c0c0;"> </span>数据类型。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_INT<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>表示<span style=" color:#c0c0c0;"> </span>SQL<span style=" color:#c0c0c0;"> </span>中的整型。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_STR<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>表示<span style=" color:#c0c0c0;"> </span>SQL<span style=" color:#c0c0c0;"> </span>中的<span style=" color:#c0c0c0;"> </span>CHAR、VARCHAR<span style=" color:#c0c0c0;"> </span>或其他字符串类型。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_LOB<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>表示<span style=" color:#c0c0c0;"> </span>SQL<span style=" color:#c0c0c0;"> </span>中大对象数据类型。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_STMT<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>表示一个记录集类型。当前尚未被任何驱动支持。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_INPUT_OUTPUT<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定参数为一个存储过程的<span style=" color:#c0c0c0;"> </span>INOUT<span style=" color:#c0c0c0;"> </span>参数。必须用一个明确的<span style=" color:#c0c0c0;"> </span>PDO::PARAM_*<span style=" color:#c0c0c0;"> </span>数据类型跟此值进行按位或。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_LAZY<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定获取方式，将结果集中的每一行作为一个对象返回，此对象的变量名对应着列名。PDO::FETCH_LAZY<span style=" color:#c0c0c0;"> </span>创建用来访问的对象变量名。在<span style=" color:#c0c0c0;"> </span>PDOStatement::fetchAll()<span style=" color:#c0c0c0;"> </span>中无效。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_ASSOC<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定获取方式，将对应结果集中的每一行作为一个由列名索引的数组返回。如果结果集中包含多个名称相同的列，则PDO::FETCH_ASSOC每个列名只返回一个值。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_NAMED<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定获取方式，将对应结果集中的每一行作为一个由列名索引的数组返回。如果结果集中包含多个名称相同的列，则PDO::FETCH_ASSOC每个列名<span style=" color:#c0c0c0;"> </span>返回一个包含值的数组。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_NUM<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定获取方式，将对应结果集中的每一行作为一个由列号索引的数组返回，从第<span style=" color:#c0c0c0;"> </span>0<span style=" color:#c0c0c0;"> </span>列开始。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_BOTH<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定获取方式，将对应结果集中的每一行作为一个由列号和列名索引的数组返回，从第<span style=" color:#c0c0c0;"> </span>0<span style=" color:#c0c0c0;"> </span>列开始。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_OBJ<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定获取方式，将结果集中的每一行作为一个属性名对应列名的对象返回。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_BOUND<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定获取方式，返回<span style=" color:#c0c0c0;"> </span>TRUE<span style=" color:#c0c0c0;"> </span>且将结果集中的列值分配给通过<span style=" color:#c0c0c0;"> </span>PDOStatement::bindParam()<span style=" color:#c0c0c0;"> </span>或<span style=" color:#c0c0c0;"> </span>PDOStatement::bindColumn()<span style=" color:#c0c0c0;"> </span>方法绑定的<span style=" color:#c0c0c0;"> </span>PHP<span style=" color:#c0c0c0;"> </span>变量。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_COLUMN<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定获取方式，从结果集中的下一行返回所需要的那一列。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_CLASS<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定获取方式，返回一个所请求类的新实例，映射列到类中对应的属性名。</pre>
<pre style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">注意:<span style=" color:#c0c0c0;"> </span>如果所请求的类中不存在该属性，则调用<span style=" color:#c0c0c0;"> </span>__set()<span style=" color:#c0c0c0;"> </span>魔术方法</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_INTO<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>指定获取方式，更新一个请求类的现有实例，映射列到类中对应的属性名。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_FUNC<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>允许在运行中完全用自定义的方式处理数据。（仅在<span style=" color:#c0c0c0;"> </span>PDOStatement::fetchAll()<span style=" color:#c0c0c0;"> </span>中有效）。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_GROUP<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>根据值分组返回。通常和<span style=" color:#c0c0c0;"> </span>PDO::FETCH_COLUMN<span style=" color:#c0c0c0;"> </span>或<span style=" color:#c0c0c0;"> </span>PDO::FETCH_KEY_PAIR<span style=" color:#c0c0c0;"> </span>一起使用。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_UNIQUE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>只取唯一值。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_KEY_PAIR<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>获取一个有两列的结果集到一个数组，其中第一列为键名，第二列为值。自<span style=" color:#c0c0c0;"> </span>PHP<span style=" color:#c0c0c0;"> </span>5.2.3<span style=" color:#c0c0c0;"> </span>起可用。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_CLASSTYPE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>根据第一列的值确定类名。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_SERIALIZE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>类似<span style=" color:#c0c0c0;"> </span>PDO::FETCH_INTO<span style=" color:#c0c0c0;"> </span>，但是以一个序列化的字符串表示对象。自<span style=" color:#c0c0c0;"> </span>PHP<span style=" color:#c0c0c0;"> </span>5.1.0<span style=" color:#c0c0c0;"> </span>起可用。从<span style=" color:#c0c0c0;"> </span>PHP<span style=" color:#c0c0c0;"> </span>5.3.0<span style=" color:#c0c0c0;"> </span>开始，如果设置此标志，则类的构造函数从不会被调用。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_PROPS_LATE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>设置属性前调用构造函数。自<span style=" color:#c0c0c0;"> </span>PHP<span style=" color:#c0c0c0;"> </span>5.2.0<span style=" color:#c0c0c0;"> </span>起可用。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_AUTOCOMMIT<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>如果此值为<span style=" color:#c0c0c0;"> </span>FALSE<span style=" color:#c0c0c0;"> </span>，PDO<span style=" color:#c0c0c0;"> </span>将试图禁用自动提交以便数据库连接开始一个事务。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_PREFETCH<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>设置预取大小来为你的应用平衡速度和内存使用。并非所有的数据库/驱动组合都支持设置预取大小。较大的预取大小导致性能提高的同时也会占用更多的内存。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_TIMEOUT<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>设置连接数据库的超时秒数。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_ERRMODE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>关于此属性的更多信息请参见<span style=" color:#c0c0c0;"> </span>错误及错误处理<span style=" color:#c0c0c0;"> </span>部分。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_SERVER_VERSION<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>此为只读属性；返回<span style=" color:#c0c0c0;"> </span>PDO<span style=" color:#c0c0c0;"> </span>所连接的数据库服务的版本信息。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_CLIENT_VERSION<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>此为只读属性；返回<span style=" color:#c0c0c0;"> </span>PDO<span style=" color:#c0c0c0;"> </span>驱动所用客户端库的版本信息。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_SERVER_INFO<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>此为只读属性。返回一些关于<span style=" color:#c0c0c0;"> </span>PDO<span style=" color:#c0c0c0;"> </span>所连接的数据库服务的元信息。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_CONNECTION_STATUS<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_CASE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>用类似<span style=" color:#c0c0c0;"> </span>PDO::CASE_*<span style=" color:#c0c0c0;"> </span>的常量强制列名为指定的大小写。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_CURSOR_NAME<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>获取或设置使用游标的名称。当使用可滚动游标和定位更新时候非常有用。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_CURSOR<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>选择游标类型。<span style=" color:#c0c0c0;"> </span>PDO<span style=" color:#c0c0c0;"> </span>当前支持<span style=" color:#c0c0c0;"> </span>PDO::CURSOR_FWDONLY<span style=" color:#c0c0c0;"> </span>和<span style=" color:#c0c0c0;"> </span>PDO::CURSOR_SCROLL。一般为<span style=" color:#c0c0c0;"> </span>PDO::CURSOR_FWDONLY，除非确实需要一个可滚动游标。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_DRIVER_NAME<span style=" color:#c0c0c0;"> </span>(string)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>返回驱动名称。</pre>
<pre style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">使用<span style=" color:#c0c0c0;"> </span>PDO::ATTR_DRIVER_NAME<span style=" color:#c0c0c0;"> </span>的例子：</pre>
<pre style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-weight:600; color:#000080;">&lt;?php</span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">if<span style=" color:#c0c0c0;"> </span>($db-&gt;getAttribute(PDO::ATTR_DRIVER_NAME)<span style=" color:#c0c0c0;"> </span>==<span style=" color:#c0c0c0;"> </span>'mysql')<span style=" color:#c0c0c0;"> </span>{</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>echo<span style=" color:#c0c0c0;"> </span>"Running<span style=" color:#c0c0c0;"> </span>on<span style=" color:#c0c0c0;"> </span>mysql;<span style=" color:#c0c0c0;"> </span>doing<span style=" color:#c0c0c0;"> </span>something<span style=" color:#c0c0c0;"> </span>mysql<span style=" color:#c0c0c0;"> </span>specific<span style=" color:#c0c0c0;"> </span>here\n";</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">}</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-weight:600; color:#000080;">?&gt;</span></pre>
<pre style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_ORACLE_NULLS<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>在获取数据时将空字符串转换成<span style=" color:#c0c0c0;"> </span>SQL<span style=" color:#c0c0c0;"> </span>中的<span style=" color:#c0c0c0;"> </span>NULL<span style=" color:#c0c0c0;"> </span>。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_PERSISTENT<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>请求一个持久连接，而非创建一个新连接。关于此属性的更多信息请参见<span style=" color:#c0c0c0;"> </span>连接与连接管理<span style=" color:#c0c0c0;"> </span>。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_STATEMENT_CLASS<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_FETCH_CATALOG_NAMES<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>将包含的目录名添加到结果集中的每个列名前面。目录名和列名由一个小数点分开（.）。此属性在驱动层面支持，所以有些驱动可能不支持此属性。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_FETCH_TABLE_NAMES<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>将包含的表名添加到结果集中的每个列名前面。表名和列名由一个小数点分开（.）。此属性在驱动层面支持，所以有些驱动可能不支持此属性。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_STRINGIFY_FETCHES<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_MAX_COLUMN_LEN<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_DEFAULT_FETCH_MODE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>自<span style=" color:#c0c0c0;"> </span>PHP<span style=" color:#c0c0c0;"> </span>5.2.0<span style=" color:#c0c0c0;"> </span>起可用。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ATTR_EMULATE_PREPARES<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>自<span style=" color:#c0c0c0;"> </span>PHP<span style=" color:#c0c0c0;"> </span>5.1.3<span style=" color:#c0c0c0;"> </span>起可用。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ERRMODE_SILENT<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>如果发生错误，则不显示错误或异常。希望开发人员显式地检查错误。此为默认模式。关于此属性的更多信息请参见<span style=" color:#c0c0c0;"> </span>错误与错误处理<span style=" color:#c0c0c0;"> </span>。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ERRMODE_WARNING<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>如果发生错误，则显示一个<span style=" color:#c0c0c0;"> </span>PHP<span style=" color:#c0c0c0;"> </span>E_WARNING<span style=" color:#c0c0c0;"> </span>消息。关于此属性的更多信息请参见<span style=" color:#c0c0c0;"> </span>错误与错误处理。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ERRMODE_EXCEPTION<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>如果发生错误，则抛出一个<span style=" color:#c0c0c0;"> </span>PDOException<span style=" color:#c0c0c0;"> </span>异常。关于此属性的更多信息请参见<span style=" color:#c0c0c0;"> </span>错误与错误处理。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::CASE_NATURAL<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>保留数据库驱动返回的列名。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::CASE_LOWER<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>强制列名小写。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::CASE_UPPER<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>强制列名大写。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::NULL_NATURAL<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::NULL_EMPTY_STRING<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::NULL_TO_STRING<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_ORI_NEXT<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>在结果集中获取下一行。仅对可滚动游标有效。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_ORI_PRIOR<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>在结果集中获取上一行。仅对可滚动游标有效。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_ORI_FIRST<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>在结果集中获取第一行。仅对可滚动游标有效。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_ORI_LAST<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>在结果集中获取最后一行。仅对可滚动游标有效。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_ORI_ABS<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>根据行号从结果集中获取需要的行。仅对可滚动游标有效。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::FETCH_ORI_REL<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>根据当前游标位置的相对位置从结果集中获取需要的行。仅对可滚动游标有效。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::CURSOR_FWDONLY<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>创建一个只进游标的<span style=" color:#c0c0c0;"> </span>PDOStatement<span style=" color:#c0c0c0;"> </span>对象。此为默认的游标选项，因为此游标最快且是<span style=" color:#c0c0c0;"> </span>PHP<span style=" color:#c0c0c0;"> </span>中最常用的数据访问模式。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::CURSOR_SCROLL<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>创建一个可滚动游标的<span style=" color:#c0c0c0;"> </span>PDOStatement<span style=" color:#c0c0c0;"> </span>对象。通过<span style=" color:#c0c0c0;"> </span>PDO::FETCH_ORI_*<span style=" color:#c0c0c0;"> </span>常量来控制结果集中获取的行。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::ERR_NONE<span style=" color:#c0c0c0;"> </span>(string)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>对应<span style=" color:#c0c0c0;"> </span>SQLSTATE<span style=" color:#c0c0c0;"> </span>'00000'，表示<span style=" color:#c0c0c0;"> </span>SQL<span style=" color:#c0c0c0;"> </span>语句没有错误或警告地成功发出。当用<span style=" color:#c0c0c0;"> </span>PDO::errorCode()<span style=" color:#c0c0c0;"> </span>或<span style=" color:#c0c0c0;"> </span>PDOStatement::errorCode()<span style=" color:#c0c0c0;"> </span>来确定是否有错误发生时，此常量非常方便。在检查上述方法返回的错误状态代码时，会经常用到。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_EVT_ALLOC<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>分配事件</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_EVT_FREE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>解除分配事件</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_EVT_EXEC_PRE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>执行一条预处理语句之前触发事件。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_EVT_EXEC_POST<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>执行一条预处理语句之后触发事件。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_EVT_FETCH_PRE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>从一个结果集中取出一条结果之前触发事件。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_EVT_FETCH_POST<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>从一个结果集中取出一条结果之后触发事件。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">PDO::PARAM_EVT_NORMALIZE<span style=" color:#c0c0c0;"> </span>(integer)<span style=" color:#c0c0c0;">&nbsp;&nbsp;&nbsp;&nbsp;</span>在绑定参数注册允许驱动程序正常化变量名时触发事件。</pre>