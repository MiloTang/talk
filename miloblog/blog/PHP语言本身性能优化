<pre style="background-color:#fdf6e3;color:#586e75;font-family:'Courier New';font-size:13.5pt;">引发<span style="font-family:'Source Code Pro';">PHP</span>性能原因有很多，有语言本身的问题，也有语言周边的问题。先从ＰＨＰ语言本身性能说起。<br><span style="font-family:'Source Code Pro';">1、 &nbsp;能用PHP自带函数解决的不要自己写方法，因为PHP代码需要编译解析为底层语言，这一过程每一次请求都会处理一遍，增加开销，多使用PHP内置函数，常量，内置变量等。同时需要注意内置函数也有快慢之分。虽然说要多用内置函数但是魔法函数性能不加，所以尽可能的避免使用魔法函数。<br>2</span>、 用单引号代替双引号来包含字符串，这样做会更快一些。因为 <span style="font-family:'Source Code Pro';">PHP </span>会在双引号包围的 字符串中搜寻变量，单引号则不会，注意：只有 <span style="font-family:'Source Code Pro';">echo </span>能这么做，它是一种可以把多个字符 串当作参数的语言结构。<br>3、@错误抑制符在代码开始前结束后增加了Opcode来忽略报错，所以建议尽量不要使用@抑制符。<br>4、合理使用内存，虽然PHP有内存回收机制，但是建议使用unset()来及时释放不使用的内存。对 global 变量，更应该用完就 unset()掉;<br>5、正则表达式开销比较大，在没有必要的情况下尽量少用正则表达式。尽可能用函数代替正则表达式完成相同功能。<br>6、在执行 for 循环之前确定最大循环数，不要每循环一次都计算最大值，最好运用 foreach 代替。<br>7、避免在循环内做运算，如下实例：<br><span style="color:#268bd2;">$str</span><span style="color:#079a71;">=</span><span style="color:#2aa198;">'hello world'</span>;<br><span style="color:#859900;">for</span>(<span style="color:#268bd2;">$i</span><span style="color:#079a71;">=</span><span style="color:#2aa198;">0</span>;<span style="color:#268bd2;">$i</span><span style="color:#079a71;">&lt;</span><span style="color:#839496;">strlen</span>(<span style="color:#268bd2;">$str</span>);<span style="color:#268bd2;">$i</span><span style="color:#079a71;">++</span>)<span style="color:#dc322f;">{<br></span><span style="color:#dc322f;">   </span><span style="color:#859900;">echo </span><span style="color:#268bd2;">$str[$i]</span>;<br><span style="color:#dc322f;">}</span><br>8、include 文件时尽量使用绝对路径，因为它避免了 PHP 去 include_path 里查找文件的速 度，解析操作系统路径所需的时间会更少。<br>9、尽量不要使用PHP去做密集型运算，这个不是PHP擅长的方向<br>10、数据库连接当使用完毕时应关掉，不要用长连接。<br>11、在方法中递增局部变量，速度是最快的。几乎与在函数中调用局部变量的速度相当。递增一个全局变量要比递增一个局部变量慢 2 倍。递增一个对象属性(如：$this-&gt;prop++)要比递增一个局部变量慢 3 倍。递增一个未预定义的局部变量要比递增一个预定义的局部变量慢 9 至 10 倍。仅定义一个局部变量而没在函数中调用它，同样会减慢速度(其程度相当于递增一个局部变量)。PHP 大概会检查看是否存在全局变量。<br>12、打开 apache 的 mod_deflate 模块，可以提高网页的浏览速度。Apache 解析一个 PHP 脚本的时间要比解析一个静态 HTML 页面慢 2 至 10 倍。尽量 多用静态 HTML 页面，少用脚本。除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套 PHP 缓存机制通常 可以提升 25%至 100%的性能，以免除编译开销。尽量做缓存，可使用 memcached。memcached 是一款高性能的内存对象缓存系统， 可用来加速动态 Web 应用程序，减轻数据库负载。对运算码 (OP code)的缓存很有用，使 得脚本不必为每个请求做重新编译。<br>13、并不是事必面向对象(OOP)，面向对象往往开销很大，每个方法和对象调用都会消耗很 多内存。并非要用类实现所有的数据结构，数组也很有用。不要把方法细分得过多，仔细想想你真正打算重用的是哪些代码?</pre><br><br>  
	