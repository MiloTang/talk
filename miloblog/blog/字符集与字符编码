  
	  
	<pre style="background-color:#fdf6e3;color:#586e75;font-family:'Courier New';font-size:13.5pt;">相信大家一定碰到过，打开某个网页，却显示一堆像乱码，当遇到纷繁复杂的字符集，各种火星文和乱码时，问题的定位往往变得非常困难。怎么办？这就需要从计算机基础说起，我们都知道计算机的基本工作状态是由电路的接通与关闭来控制的，用0、1来表示这两个状态，于是计算机就相当于认识了01，是不认识我们看到的这些五光十色的内容的。于是我们需要有一套规则来说明对应计算机的01表示什么，这就是产生编码的原因了。计算机中储存的信息都是用二进制数表示的；而我们在屏幕上看到的英文、汉字等字符是二进制数转换之后的结果。通俗的说，按照何种规则将字符存储在计算机中，如'9'用什么表示，称为"编码"；反之，将存储在计算机中的二进制数解析显示出来，称为"解码",在解码过程中，如果使用了错误的解码规则，则导致'9'解析成'0'或者乱码。其实也类似于我们生活中的各种语言一样，你说汉语，我说英语，完全是鸡同鸭讲。<br><br><b>字符集（<span style="font-family:'Source Code Pro';">Charset</span>）：</b>是一个系统支持的所有抽象字符的集合。字符是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。<br><b>字符编码（<span style="font-family:'Source Code Pro';">Character Encoding</span>）：</b>是一套法则，使用该法则能够对自然语言的字符的一个集合（如字母表或音节表），与其他东西的一个集合（如号码或电脉冲）进行配对。即在符号集合与数字系统之间建立对应关系，它是信息处理的一项基本技术。通常人们用符号集合（一般情况下就是文字）来表达信息。而以计算机为基础的信息处理系统则是利用元件（硬件）不同状态的组合来存储和处理信息的。元件不同状态的组合能代表数字系统的数字，因此字符编码就是将符号转换为计算机可以接受的数字系统的数，称为数字代码。 &nbsp;<br><b>常见字符集名称：</b>ASCII字符集、GB2312字符集、BIG5字符集、GB18030字符集、Unicode字符集等。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。<br><br>ASCII<span style="font-family:'Courier New';">（</span>American Standard Code for Information Interchange<span style="font-family:'Courier New';">，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语，而其扩展版本</span>EASCII<span style="font-family:'Courier New';">则可以勉强显示其他西欧语言。它是现今最通用的单字节编码系统（但是有被</span>Unicode<span style="font-family:'Courier New';">追上的迹象），并等同于国际标准</span>ISO/IEC 646<span style="font-family:'Courier New';">。</span><span style="font-family:'Courier New';"></span>ASCII<span style="font-family:'Courier New';">字符集：主要包括控制字符（回车键、退格、换行键等）；可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</span><span style="font-family:'Courier New';"></span>ASCII<span style="font-family:'Courier New';">编码：将</span>ASCII<span style="font-family:'Courier New';">字符集转换为计算机可以接受的数字系统的数的规则。使用</span>7<span style="font-family:'Courier New';">位（</span>bits<span style="font-family:'Courier New';">）表示一个字符，共</span>128<span style="font-family:'Courier New';">字符；但是</span>7<span style="font-family:'Courier New';">位编码的字符集只能支持</span>128<span style="font-family:'Courier New';">个字符，为了表示更多的欧洲常用字符对</span>ASCII<span style="font-family:'Courier New';">进行了扩展，</span>ASCII<span style="font-family:'Courier New';">扩展字符集使用</span>8<span style="font-family:'Courier New';">位（</span>bits<span style="font-family:'Courier New';">）表示一个字符，共</span>256<span style="font-family:'Courier New';">字符。<br></span><span style="font-family:'Courier New';"></span><br>GB2312<span style="font-family:'Courier New';">。</span>GB2312<span style="font-family:'Courier New';">或</span>GB2312-80<span style="font-family:'Courier New';">是中国国家标准简体中文字符集，全称《信息交换用汉字编码字符集</span>·<span style="font-family:'Courier New';">基本集》，又称</span>GB0<span style="font-family:'Courier New';">，由中国国家标准总局发布，</span>1981<span style="font-family:'Courier New';">年</span>5<span style="font-family:'Courier New';">月</span>1<span style="font-family:'Courier New';">日实施。</span>GB2312<span style="font-family:'Courier New';">编码通行于中国大陆；新加坡等地也采用此编码。中国大陆几乎所有的中文系统和国际化的软件都支持</span>GB2312<span style="font-family:'Courier New';">。</span>GB2312<span style="font-family:'Courier New';">的出现，基本满足了汉字的计算机处理需要，它所收录的汉字已经覆盖中国大陆</span>99.75%<span style="font-family:'Courier New';">的使用频率。对于人名、古汉语等方面出现的罕用字，</span>GB2312<span style="font-family:'Courier New';">不能处理，这导致了后来</span>GBK<span style="font-family:'Courier New';">及</span>GB 18030<span style="font-family:'Courier New';">汉字字符集的出现。<br><br></span>由于<span style="font-family:'Source Code Pro';">GB 2312-80</span>只收录<span style="font-family:'Source Code Pro';">6763</span>个汉字，有不少汉字，如部分在<span style="font-family:'Source Code Pro';">GB 2312-80</span>推出以后才简化的汉字（如<span style="font-family:'Source Code Pro';">"</span>啰<span style="font-family:'Source Code Pro';">"</span>），部分人名用字（如中国前总理朱镕基的<span style="font-family:'Source Code Pro';">"</span>镕<span style="font-family:'Source Code Pro';">"</span>字），台湾及香港使用的繁体字，日语及朝鲜语汉字等，并未有收录在内。于是厂商微软利用<span style="font-family:'Source Code Pro';">GB 2312-80</span>未使用的编码空间，收录<span style="font-family:'Source Code Pro';">GB 13000.1-93</span>全部字符制定了<span style="font-family:'Source Code Pro';">GBK</span>编码。根据微软资料，<span style="font-family:'Source Code Pro';">GBK</span>是对<span style="font-family:'Source Code Pro';">GB2312-80</span>的扩展，也就是<span style="font-family:'Source Code Pro';">CP936</span>字码表 <span style="font-family:'Source Code Pro';">(Code Page 936)</span>的扩展（之前<span style="font-family:'Source Code Pro';">CP936</span>和<span style="font-family:'Source Code Pro';">GB 2312-80</span>一模一样），最早实现于<span style="font-family:'Source Code Pro';">Windows 95</span>简体中文版。虽然<span style="font-family:'Source Code Pro';">GBK</span>收录<span style="font-family:'Source Code Pro';">GB 13000.1-93</span>的全部字符，但编码方式并不相同。<span style="font-family:'Source Code Pro';">GBK</span>自身并非国家标准，只是曾由国家技术监督局标准化司、电子工业部科技与质量监督司公布为<span style="font-family:'Source Code Pro';">"</span>技术规范指导性文件<span style="font-family:'Source Code Pro';">"</span>。原始<span style="font-family:'Source Code Pro';">GB13000</span>一直未被业界采用，后续国家标准<span style="font-family:'Source Code Pro';">GB18030</span>技术上兼容<span style="font-family:'Source Code Pro';">GBK</span>而非<span style="font-family:'Source Code Pro';">GB13000</span>。<br><span style="font-family:'Source Code Pro';">GB 18030</span>，全称：国家标准<span style="font-family:'Source Code Pro';">GB 18030-2005</span>《信息技术 中文编码字符集》，是中华人民共和国现时最新的内码字集，是<span style="font-family:'Source Code Pro';">GB 18030-2000</span>《信息技术 信息交换用汉字编码字符集 基本集的扩充》的修订版。与<span style="font-family:'Source Code Pro';">GB 2312-1980</span>完全兼容，与<span style="font-family:'Source Code Pro';">GBK</span>基本兼容，支持<span style="font-family:'Source Code Pro';">GB 13000</span>及<span style="font-family:'Source Code Pro';">Unicode</span>的全部统一汉字，共收录汉字<span style="font-family:'Source Code Pro';">70244</span>个。<span style="font-family:'Source Code Pro';">GB 18030</span>主要有以下特点：<br>与<span style="font-family:'Source Code Pro';">UTF-8</span>相同，采用多字节编码，每个字可以由<span style="font-family:'Source Code Pro';">1</span>个、<span style="font-family:'Source Code Pro';">2</span>个或<span style="font-family:'Source Code Pro';">4</span>个字节组成。<br>编码空间庞大，最多可定义<span style="font-family:'Source Code Pro';">161</span>万个字符。<br>支持中国国内少数民族的文字，不需要动用造字区。<br>汉字收录范围包含繁体汉字以及日韩汉字 <br><br>Big5<span style="font-family:'Courier New';">，又称为大五码或五大码，是使用繁体中文（正体中文）社区中最常用的电脑汉字字符集标准，共收录</span>13,060<span style="font-family:'Courier New';">个汉字。中文码分为内码及交换码两类，</span>Big5<span style="font-family:'Courier New';">属中文内码，知名的中文交换码有</span>CCCII<span style="font-family:'Courier New';">、</span>CNS11643<span style="font-family:'Courier New';">。</span>Big5<span style="font-family:'Courier New';">虽普及于台湾、香港与澳门等繁体中文通行区，但长期以来并非当地的国家标准，而只是业界标准。倚天中文系统、</span>Windows<span style="font-family:'Courier New';">等主要系统的字符集都是以</span>Big5<span style="font-family:'Courier New';">为基准，但厂商又各自增加不同的造字与造字区，派生成多种不同版本。</span>2003<span style="font-family:'Courier New';">年，</span>Big5<span style="font-family:'Courier New';">被收录到</span>CNS11643<span style="font-family:'Courier New';">中文标准交换码的附录当中，取得了较正式的地位。这个最新版本被称为</span>Big5-2003<span style="font-family:'Courier New';">。</span><span style="font-family:'Courier New';"></span>Big5<span style="font-family:'Courier New';">码是一套双字节字符集，使用了双八码存储方法，以两个字节来安放一个字。第一个字节称为</span>"<span style="font-family:'Courier New';">高位字节</span>"<span style="font-family:'Courier New';">，第二个字节称为</span>"<span style="font-family:'Courier New';">低位字节</span>"<span style="font-family:'Courier New';">。</span>"<span style="font-family:'Courier New';">高位字节</span>"<span style="font-family:'Courier New';">使用了</span>0x81-0xFE<span style="font-family:'Courier New';">，</span>"<span style="font-family:'Courier New';">低位字节</span>"<span style="font-family:'Courier New';">使用了</span>0x40-0x7E<span style="font-family:'Courier New';">，及</span>0xA1-0xFE<span style="font-family:'Courier New';">。<br><br></span>当计算机传到世界各个国家时，为了适合当地语言和字符，设计和实现类似<span style="font-family:'Source Code Pro';">GB232/GBK/GB18030/BIG5</span>的编码方案。这样各搞一套，在本地使用没有问题，一旦出现在网络中，由于不兼容，互相访问就出现了乱码现象。<br><br>为了解决这个问题，一个伟大的创想产生了<span style="font-family:'Source Code Pro';">——Unicode</span>。<span style="font-family:'Source Code Pro';">Unicode</span>编码系统为表达任意语言的任意字符而设计。它使用<span style="font-family:'Source Code Pro';">4</span>字节的数字来表达每个字母、符号，或者表意文字<span style="font-family:'Source Code Pro';">(ideograph)</span>。每个数字代表唯一的至少在某种语言中使用的符号。（并不是所有的数字都用上了，但是总数已经超过了<span style="font-family:'Source Code Pro';">65535</span>，所以<span style="font-family:'Source Code Pro';">2</span>个字节的数字是不够用的。）被几种语言共用的字符通常使用相同的数字来编码，除非存在一个在理的语源学<span style="font-family:'Source Code Pro';">(etymological)</span>理由使不这样做。不考虑这种情况的话，每个字符对应一个数字，每个数字对应一个字符。即不存在二义性。不再需要记录<span style="font-family:'Source Code Pro';">"</span>模式<span style="font-family:'Source Code Pro';">"</span>了。<span style="font-family:'Source Code Pro';">U+0041</span>总是代表<span style="font-family:'Source Code Pro';">'A'</span>，即使这种语言没有<span style="font-family:'Source Code Pro';">'A'</span>这个字符。<br><br>在计算机科学领域中，<span style="font-family:'Source Code Pro';">Unicode</span>（统一码、万国码、单一码、标准万国码）是业界的一种标准，它可以使电脑得以体现世界上数十种文字的系统。<span style="font-family:'Source Code Pro';">Unicode </span>是基于通用字符集（<span style="font-family:'Source Code Pro';">Universal Character Set</span>）的标准来发展，并且同时也以书本的形式<span style="font-family:'Source Code Pro';">[1]</span>对外发表。<span style="font-family:'Source Code Pro';">Unicode </span>还不断在扩增， 每个新版本插入更多新的字符。直至目前为止的第六版，<span style="font-family:'Source Code Pro';">Unicode </span>就已经包含了超过十万个字符（在<span style="font-family:'Source Code Pro';">2005</span>年，<span style="font-family:'Source Code Pro';">Unicode </span>的第十万个字符被采纳且认可成为标准之一）、一组可用以作为视觉参考的代码图表、一套编码方法与一组标准字符编码、一套包含了上标字、下标字等字符特性的枚举等。<span style="font-family:'Source Code Pro';">Unicode </span>组织（<span style="font-family:'Source Code Pro';">The Unicode Consortium</span>）是由一个非营利性的机构所运作，并主导 <span style="font-family:'Source Code Pro';">Unicode </span>的后续发展，其目标在于：将既有的字符编码方案以<span style="font-family:'Source Code Pro';">Unicode </span>编码方案来加以取代，特别是既有的方案在多语环境下，皆仅有有限的空间以及不兼容的问题。 <br><br>为什么会出现乱码，简单的说乱码的出现是因为：编码和解码时用了不同或者不兼容的字符集。一个用UTF-8编码后的字符，用GBK去解码。由于两个字符集的字库表不一样，同一个汉字在两个字符表的位置也不同，最终就会出现乱码。例如我们用UFT-8编码的字符，用GBK字符去解码看到的却是"鍗庝附鐨勮浆韬",那么我们需要简单的几步来还原字符串。<br>第一步：编码将'鍗庝附鐨勮浆韬'先通过GBK把乱码编码成二进制表达式为E58D8EE4B8BDE79A84E8BDACE8BAAB<br>第二步：找到原来的字符集是什么，这里我们已经知道了原来的字符集是UTF-8，那么不知道的情况下呢，两个方法一个是找出二进制之间的规律可能是什么字符集，就用那个字符集去解码去试试看。在有就是最原始的方法，居然GBK乱码了，那么肯定是不兼容的或者不同于GBK字符集的其他字符集，那就一个一个的试了。<br>第三步：解码，通过使用UTF-8字符集解码我们得到了一个字符串为"华丽的转身"。<br>所以如果我们在做网络应用的时候最好考虑到客户端可能出现哪些字符集编码，采用兼容度高的方式去编码尽可能的减少乱码的情况。<br><br></pre>