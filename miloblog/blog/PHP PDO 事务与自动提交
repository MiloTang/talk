
<style type="text/css">
p, li { white-space: pre-wrap; }
</style>
<p style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></p>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">现在通过<span style=" color:#c0c0c0;"> </span>PDO<span style=" color:#c0c0c0;"> </span>连接上了，在开始进行查询前，必须先理解<span style=" color:#c0c0c0;"> </span>PDO<span style=" color:#c0c0c0;"> </span>是如何管理事务的。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">事务支持四大特性（ACID）：</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">    </span>原子性（Atomicity）</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">    </span>一致性（Consistency）</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">    </span>隔离性（Isolation）</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">    </span>持久性（Durability）</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">通俗地讲，在一个事务中执行的任何操作，即使是分阶段执行的，也能保证安全地应用于数据库，并在提交时不会受到来自其他连接的干扰。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">事务操作也可以根据请求自动撤销（假设还没有提交），这使得在脚本中处理错误更加容易。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">事务通常是通过把一批更改"积蓄"起来然后使之同时生效而实现的；这样做的好处是可以大大地提供这些更改的效率。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">换句话说，事务可以使脚本更快，而且可能更健壮（不过需要正确地使用事务才能获得这样的好处）。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">不幸的是，并非每种数据库都支持事务，因此当第一次打开连接时，PDO<span style=" color:#c0c0c0;"> </span>需要在所谓的"自动提交"模式下运行。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">自动提交模式意味着，如果数据库支持，运行的每个查询都有它自己的隐式事务，如果数据库不支持事务，则没有。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">如果需要一个事务，则必须用<span style=" color:#c0c0c0;"> </span>PDO::beginTransaction()<span style=" color:#c0c0c0;"> </span>方法来启动。如果底层驱动不支持事务，则抛出一个<span style=" color:#c0c0c0;"> </span>PDOException<span style=" color:#c0c0c0;"> </span>异常（不管错误处理设置是怎样的，这都是一个严重的错误状态）。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">一旦开始了事务，可用<span style=" color:#c0c0c0;"> </span>PDO::commit()<span style=" color:#c0c0c0;"> </span>或<span style=" color:#c0c0c0;"> </span>PDO::rollBack()来完成，这取决于事务中的代码是否运行成功。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">注意：<span style=" color:#c0c0c0;"> </span>PDO<span style=" color:#c0c0c0;"> </span>仅在驱动层检查是否具有事务处理能力。如果某些运行时条件意味着事务不可用，且数据库服务接受请求去启动一个事务，PDO::beginTransaction()<span style=" color:#c0c0c0;"> </span>将仍然返回<span style=" color:#c0c0c0;"> </span>TRUE<span style=" color:#c0c0c0;"> </span>而且没有错误。<span style=" color:#c0c0c0;"> </span>试着在<span style=" color:#c0c0c0;"> </span>MySQL<span style=" color:#c0c0c0;"> </span>数据库的<span style=" color:#c0c0c0;"> </span>MyISAM<span style=" color:#c0c0c0;"> </span>数据表中使用事务就是一个很好的例子。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">当脚本结束或连接即将被关闭时，如果尚有一个未完成的事务，那么<span style=" color:#c0c0c0;"> </span>PDO<span style=" color:#c0c0c0;"> </span>将自动回滚该事务。这种安全措施有助于在脚本意外终止时避免出现不一致的情况——如果没有显式地提交事务，那么假设是某个地方出错了，所以执行回滚来保证数据安全。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">注意：<span style=" color:#c0c0c0;"> </span>只有通过<span style=" color:#c0c0c0;"> </span>PDO::beginTransaction()<span style=" color:#c0c0c0;"> </span>启动一个事务后，才可能发生自动回滚。如果手动发出一条查询启动事务，<span style=" color:#c0c0c0;"> </span>则<span style=" color:#c0c0c0;"> </span>PDO<span style=" color:#c0c0c0;"> </span>无法知晓，从而在必要时不能进行回滚。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">在事务中执行批处理:</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">在下面例子中，假设为新员工创建一组条目，分配一个为23的ID。除了登记此人的基本数据之外，还需要记录他的工资。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">两个更新分别完成起来很简单，但通过封闭在<span style=" color:#c0c0c0;"> </span>PDO::beginTransaction()<span style=" color:#c0c0c0;"> </span>和PDO::commit()<span style=" color:#c0c0c0;"> </span>调用中，可以保证在更改完成之前，其他人无法看到这些更改。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">如果发生了错误，catch<span style=" color:#c0c0c0;"> </span>块回滚自事务启动以来发生的所有更改，并输出一条错误信息。</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-weight:600; color:#000080;">&lt;?php</span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">try<span style=" color:#c0c0c0;"> </span>{</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>$dbh<span style=" color:#c0c0c0;"> </span>=<span style=" color:#c0c0c0;"> </span>new<span style=" color:#c0c0c0;"> </span>PDO('odbc:SAMPLE',<span style=" color:#c0c0c0;"> </span>'db2inst1',<span style=" color:#c0c0c0;"> </span>'ibmdb2',<span style=" color:#c0c0c0;"> </span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">      </span>array(PDO::ATTR_PERSISTENT<span style=" color:#c0c0c0;"> </span>=&gt;<span style=" color:#c0c0c0;"> </span>true));</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>echo<span style=" color:#c0c0c0;"> </span>"Connected\n";</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">}<span style=" color:#c0c0c0;"> </span>catch<span style=" color:#c0c0c0;"> </span>(Exception<span style=" color:#c0c0c0;"> </span>$e)<span style=" color:#c0c0c0;"> </span>{</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>die("Unable<span style=" color:#c0c0c0;"> </span>to<span style=" color:#c0c0c0;"> </span>connect:<span style=" color:#c0c0c0;"> </span>"<span style=" color:#c0c0c0;"> </span>.<span style=" color:#c0c0c0;"> </span>$e-&gt;getMessage());</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">}</pre>
<pre style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">try<span style=" color:#c0c0c0;"> </span>{<span style=" color:#c0c0c0;">  </span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>$dbh-&gt;setAttribute(PDO::ATTR_ERRMODE,<span style=" color:#c0c0c0;"> </span>PDO::ERRMODE_EXCEPTION);</pre>
<pre style="-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><br></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>$dbh-&gt;beginTransaction();</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>$dbh-&gt;exec("insert<span style=" color:#c0c0c0;"> </span>into<span style=" color:#c0c0c0;"> </span>staff<span style=" color:#c0c0c0;"> </span>(id,<span style=" color:#c0c0c0;"> </span>first,<span style=" color:#c0c0c0;"> </span>last)<span style=" color:#c0c0c0;"> </span>values<span style=" color:#c0c0c0;"> </span>(23,<span style=" color:#c0c0c0;"> </span>'Joe',<span style=" color:#c0c0c0;"> </span>'Bloggs')");</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>$dbh-&gt;exec("insert<span style=" color:#c0c0c0;"> </span>into<span style=" color:#c0c0c0;"> </span>salarychange<span style=" color:#c0c0c0;"> </span>(id,<span style=" color:#c0c0c0;"> </span>amount,<span style=" color:#c0c0c0;"> </span>changedate)<span style=" color:#c0c0c0;"> </span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">      </span>values<span style=" color:#c0c0c0;"> </span>(23,<span style=" color:#c0c0c0;"> </span>50000,<span style=" color:#c0c0c0;"> </span>NOW())");</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>$dbh-&gt;commit();</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">}<span style=" color:#c0c0c0;"> </span>catch<span style=" color:#c0c0c0;"> </span>(Exception<span style=" color:#c0c0c0;"> </span>$e)<span style=" color:#c0c0c0;"> </span>{</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>$dbh-&gt;rollBack();</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" color:#c0c0c0;">  </span>echo<span style=" color:#c0c0c0;"> </span>"Failed:<span style=" color:#c0c0c0;"> </span>"<span style=" color:#c0c0c0;"> </span>.<span style=" color:#c0c0c0;"> </span>$e-&gt;getMessage();</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">}</pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"><span style=" font-weight:600; color:#000080;">?&gt;</span></pre>
<pre style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">并不局限于在事务中更改，也可以发出复杂的查询来提取数据，还可以使用那些信息来构建更多的更改和查询；当事务激活时，可以保证其他人在操作进行当中无法作出更改。</pre>